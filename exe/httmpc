#!/usr/bin/env ruby
require "sinatra"
require "sys-filesystem"
require "net/telnet"
require "time"
require "httmpc"

$mpdhost = "soundwave.local"
$mpdport = 6600

$music_dir = File.join ENV['HOME'], 'radio'

set :views, Proc.new { File.join(root, "../views") }

get '/' do
	redirect '/listall'
end


# ディスク残量(GB)
def available
	stat = Sys::Filesystem.stat('/')
	available = (stat.blocks_available * stat.block_size).to_f / 1024 / 1024 / 1024
end


# ディスク容量(GB)
def total
	stat = Sys::Filesystem.stat('/')
	total = (stat.blocks * stat.block_size).to_f / 1024 / 1024 / 1024
end


def fetch_songs(cmd)
	songs = []
	info = []
	res = term {|t| t.cmd(cmd)}
	return [] unless res # 曲がない

	infos = res.split(/\n/)
	infos.pop
	infos.each do |s|
	 	if s =~ /^file:/ && info.size > 0
	 		songs << Song.new(info)
	 		info = []
	 	end
	 	info << s
	end
	songs << Song.new(info) if info.size > 0
	songs
end


def term
	term = Net::Telnet.new("Host" => $mpdhost, "Port" => $mpdport,
				"Prompt"=>/OK/, "Telnetmode" => false, "Binmode" => true)
	term.waitfor /^OK.*$/
	res = yield term
	term.close
	res
end

post '/add/:file' do |file|
	content_type :json
	res = term {|t| t.cmd "add #{file}" }
	res.force_encoding('utf-8') if res
	{action: 'add', file: file, responce: res}.to_json
end


delete '/delete/:id' do |id|
	content_type :json
	res = term {|t| t.cmd "deleteid #{id}" }
	{action: 'delete', id: id, responce: res}.to_json
end


post '/play/:id' do |id|
	content_type :json
	res = term {|t| t.cmd("playid #{id}") }
	res.force_encoding('utf-8') if res
	{action: 'play', id: id, responce: res}.to_json
end

post '/play' do
	content_type :text
	term {|t| t.cmd("play") }
end


post '/pause' do
	content_type :text
	term {|t| t.cmd("pause") }
end


post '/next' do
	content_type :text
	term {|t| t.cmd("next") }
end

post '/previous' do
	content_type :text
	term {|t| t.cmd("previous") }
end


post '/seekcur/:sec' do |sec|
	content_type :text
	res = term {|t| t.cmd("seekcur #{sec}") }
	"#{res}: seekcur #{sec}"
end


get '/playlist' do
	begin
		@title = "PlayList"
		@songs = fetch_songs 'playlistinfo'
		erb :playlist, layout: :template

	rescue Errno::ECONNREFUSED
		"#{$mpdhost}:#{$mpdport} mpdホストへの接続失敗"
	end
end


get '/listall' do
	begin
		@title = "AllList"
		res = term {|t| t.cmd("update") }
		@songs = fetch_songs 'listallinfo'
		@songs = @songs.sort_by {|s| s.onair }.reverse

		erb :listall, layout: :template

	rescue Errno::ECONNREFUSED
		"#{$mpdhost}:#{$mpdport} mpdホストへの接続失敗"

	rescue Encoding::CompatibilityError
		"listallinfoのエンコード失敗"
	end
end


def stat2hash(res)
	stats = res.split(/\n/)
	stats.pop
	hash = {}
	stats.each do |s|
		k,v = s.split(/: /)
		hash[k] = v
	end
	hash
end

get '/playing' do
	begin
		res = term {|t| t.cmd('status') }
		return {}.to_json unless res
		status = stat2hash(res)

		playing = {}
		playing['state'] = status['state']

		if playing['state'] == 'stop'
			playing['title'] = 'stopping'
			playing['elapsed'] = '--:--'
			playing['time'] = '--:--'

		else
			playing['elapsed'] = status['elapsed'].to_f
			songs = fetch_songs('currentsong')
			song = songs[0]
			playing['title'] = song.title
			playing['onair'] = song.onair if song.has_key? 'onair'
			playing['time'] = song.time.to_i
		end

		playing.to_json

	rescue Errno::ECONNRESET, Errno::EPIPE
		return {}.to_json
	end

end


delete '/kill_file/:file' do |file|
	content_type :json
	begin
		FileUtils.rm File.join($music_dir, file)
		{action: 'delete', file: file, responce: 'done'}.to_json
	rescue Errno::ENOENT
		status 404
		"#{file}が存在しません"
	end
end

